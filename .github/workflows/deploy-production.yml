name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - production-eu

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify tag format
      run: |
        if [[ ! ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Tag must be in format v1.2.3"
          exit 1
        fi
        
    - name: Check if tag exists
      run: |
        if git rev-parse ${{ github.ref }} >/dev/null 2>&1; then
          echo "Tag exists"
        else
          echo "Tag does not exist"
          exit 1
        fi
        
    - name: Run security scan
      run: |
        echo "Running pre-deployment security scan..."
        # This would run critical security checks
        
    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests on staging environment..."
        # This would test staging before production deployment

  deploy-production:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install torch==2.1.1
        pip install -r requirements.txt
        cd ui && npm ci
        
    - name: Build frontend
      run: |
        cd ui
        npm run build
        
    - name: Build Docker images
      run: |
        docker build -f ops/Dockerfile.api -t gnn-attack-api:production .
        docker build -f ops/Dockerfile.ui -t gnn-attack-ui:production ./ui
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
        
    - name: Build, tag, and push API image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gnn-attack-api
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        docker tag gnn-attack-api:production $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag gnn-attack-api:production $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Build, tag, and push UI image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gnn-attack-ui
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        docker tag gnn-attack-ui:production $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag gnn-attack-ui:production $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Update ECS task definitions
      run: |
        # Update API task definition
        aws ecs describe-task-definition --task-definition gnn-attack-api-prod > api-td.json
        jq '.taskDefinition | .containerDefinitions[0].image = "'$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'"' api-td.json > api-td-updated.json
        aws ecs register-task-definition --cli-input-json file://api-td-updated.json
        
        # Update UI task definition
        aws ecs describe-task-definition --task-definition gnn-attack-ui-prod > ui-td.json
        jq '.taskDefinition | .containerDefinitions[0].image = "'$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'"' ui-td.json > ui-td-updated.json
        aws ecs register-task-definition --cli-input-json file://ui-td-updated.json
        
    - name: Deploy to ECS with blue-green deployment
      run: |
        # Create new deployment
        aws ecs create-deployment \
          --cluster gnn-attack-production \
          --service gnn-attack-api \
          --task-definition gnn-attack-api-prod
        aws ecs create-deployment \
          --cluster gnn-attack-production \
          --service gnn-attack-ui \
          --task-definition gnn-attack-ui-prod
          
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster gnn-attack-production \
          --services gnn-attack-api gnn-attack-ui
          
    - name: Run comprehensive health checks
      run: |
        # Get the load balancer URL
        LB_URL=$(aws elbv2 describe-load-balancers --names gnn-attack-production --query 'LoadBalancers[0].DNSName' --output text)
        
        # Wait for services to be ready
        sleep 60
        
        # Test API health
        curl -f https://$LB_URL/api/health || exit 1
        
        # Test UI
        curl -f https://$LB_URL/ || exit 1
        
        # Test critical endpoints
        curl -f -X POST https://$LB_URL/api/v1/paths \
          -H "Content-Type: application/json" \
          -d '{"target_asset": "crown-jewel-db-001", "algorithm": "hybrid"}' || exit 1
        
        echo "All health checks passed!"
        
    - name: Update deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            environment: 'production',
            description: 'Deployment to production completed successfully'
          });

  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install torch==2.1.1
        pip install -r requirements.txt
        
    - name: Run post-deployment tests
      run: |
        # Get production URL
        PROD_URL=$(aws elbv2 describe-load-balancers --names gnn-attack-production --query 'LoadBalancers[0].DNSName' --output text)
        
        # Run comprehensive tests
        python -m pytest tests/integration/ -v --tb=short
        
        # Run performance tests
        locust -f ops/k6/post-deployment-tests.py --headless -u 10 -r 2 -t 60s --html post-deployment-report.html
        
    - name: Upload post-deployment test results
      uses: actions/upload-artifact@v4
      with:
        name: post-deployment-test-results
        path: post-deployment-report.html
        retention-days: 30

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "ðŸš€ PRODUCTION DEPLOYMENT\nGNN Attack Path Demo - Production\nStatus: ${{ job.status }}\nVersion: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}"
          }
          
    # Teams notification removed due to linter issues
    # - name: Notify Teams
    #   uses: skitionek/notify-microsoft-teams@master
    #   with:
    #     webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
    #     title: 'ðŸš€ GNN Attack Path Demo - Production Deployment'
    #     text: |
    #       Status: ${{ job.status }}
    #       Version: ${{ github.ref_name }}
    #       Commit: ${{ github.sha }}
    #       Author: ${{ github.actor }}
    #       Environment: Production
          
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          
          - Production deployment of GNN Attack Path Demo
          - Version: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          
          ## Deployment Status
          - Status: ${{ job.status }}
          - Environment: Production
          - Deployed by: ${{ github.actor }}
        draft: false
        prerelease: false

  rollback-production:
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production, post-deployment-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Rollback to previous version
      run: |
        # Get the previous task definition
        PREVIOUS_TD=$(aws ecs describe-services \
          --cluster gnn-attack-production \
          --services gnn-attack-api \
          --query 'services[0].deployments[1].taskDefinition' \
          --output text)
        
        # Update service to previous task definition
        aws ecs update-service \
          --cluster gnn-attack-production \
          --service gnn-attack-api \
          --task-definition $PREVIOUS_TD
          
        aws ecs update-service \
          --cluster gnn-attack-production \
          --service gnn-attack-ui \
          --task-definition $PREVIOUS_TD
          
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      with:
        status: failure
        channel: '#deployments'
        custom_payload: |
          {
            "text": "ðŸš¨ PRODUCTION ROLLBACK INITIATED\nGNN Attack Path Demo - Production\nDeployment failed, rolling back to previous version\nVersion: ${{ github.ref_name }}\nCommit: ${{ github.sha }}"
          }
