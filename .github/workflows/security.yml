name: Security Scanning

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install torch==2.1.1
        pip install -r requirements.txt
        cd ui && npm ci
        
    - name: Run npm audit
      run: |
        cd ui
        npm audit --audit-level=moderate --json > npm-audit.json
        
    - name: Run pip audit
      run: |
        pip install pip-audit
        pip-audit --format=json --output=pip-audit.json
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-node.json
        
    - name: Run Snyk Python scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json-file-output=snyk-python.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-reports
        path: |
          npm-audit.json
          pip-audit.json
          snyk-node.json
          snyk-python.json
        retention-days: 30

  code-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install torch==2.1.1
        pip install -r requirements.txt
        pip install bandit safety semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r api/ agent/ scorer/ graph/ data/ -f json -o bandit-report.json
        
    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-report.json
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json api/ agent/ scorer/ graph/ data/
        
    - name: Upload code security reports
      uses: actions/upload-artifact@v4
      with:
        name: code-security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
        retention-days: 30

  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog secret scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run GitLeaks secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run detect-secrets scan
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline

  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker images
      run: |
        docker build -f ops/Dockerfile.api -t gnn-attack-api:latest .
        docker build -f ops/Dockerfile.ui -t gnn-attack-ui:latest ./ui
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'gnn-attack-api:latest'
        format: 'sarif'
        output: 'trivy-api-results.sarif'
        
    - name: Run Trivy on UI image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'gnn-attack-ui:latest'
        format: 'sarif'
        output: 'trivy-ui-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-api-results.sarif'
        
    - name: Upload Trivy UI scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-ui-results.sarif'

  infrastructure-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Run Checkov IaC scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: iac/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'checkov-results.sarif'

  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, container-scan, infrastructure-scan]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports/
        
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Scan Results" >> security-summary.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- Code Scan: ${{ needs.code-scan.result }}" >> security-summary.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "1. Review any failed scans in the artifacts" >> security-summary.md
        echo "2. Address high and critical vulnerabilities" >> security-summary.md
        echo "3. Update dependencies with known vulnerabilities" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 30
        
    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
